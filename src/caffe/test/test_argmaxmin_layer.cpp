#include <utility>
#include <vector>

#include "gtest/gtest.h"

#include "caffe/blob.hpp"
#include "caffe/common.hpp"
#include "caffe/filler.hpp"
#include "caffe/vision_layers.hpp"

#include "caffe/test/test_caffe_main.hpp"

namespace caffe {

	template <typename TypeParam>
class ArgMaxMinLayerTest : public MultiDeviceTest<TypeParam> {
	typedef typename TypeParam::Dtype Dtype;
 protected:
	 ArgMaxMinLayerTest()
      : blob_bottom_(new Blob<Dtype>(2, 3, 4, 5)),
	  blob_bottom_1(new Blob<Dtype>(2, 2, 10, 10)),
	  blob_top_1(new Blob<Dtype>()),
        blob_top_(new Blob<Dtype>()) {
    Caffe::set_random_seed(1701);
    // fill the values
    blob_bottom_vec_.push_back(blob_bottom_);
	blob_bottom_vec_1.push_back(blob_bottom_1);
    blob_top_vec_.push_back(blob_top_);
	blob_top_vec_1.push_back(blob_top_1);
  }
	 virtual ~ArgMaxMinLayerTest() { delete blob_bottom_; delete blob_bottom_1;  delete blob_top_; delete blob_top_1; }
  Blob<Dtype>* const blob_bottom_;
  Blob<Dtype>* const blob_bottom_1;
  Blob<Dtype>* const blob_top_;
  Blob<Dtype>* const blob_top_1;
  vector<Blob<Dtype>*> blob_bottom_vec_;
  vector<Blob<Dtype>*> blob_bottom_vec_1;
  vector<Blob<Dtype>*> blob_top_vec_;
  vector<Blob<Dtype>*> blob_top_vec_1;
};

TYPED_TEST_CASE(ArgMaxMinLayerTest, TestDtypesAndDevices);

TYPED_TEST(ArgMaxMinLayerTest, TestArgMax) {
	typedef typename TypeParam::Dtype Dtype;
	Dtype input_data[] = { 13, 30, 64, 102, 116, 59, 76, 33, 6, 68, 21, 3, 46,
		49, 2, 119, 61, 62, 45, 110, 73, 50, 95, 16, 114, 65,
		104, 9, 78, 84, 12, 36, 69, 83, 112, 90, 72, 111, 85,
		106, 82, 26, 118, 15, 18, 44, 74, 51, 107, 70, 5, 98,
		93, 17, 4, 108, 32, 100, 11, 35, 14, 66, 28, 71, 27,
		89, 34, 38, 91, 99, 88, 117, 97, 43, 113, 8, 109, 96,
		52, 48, 94, 24, 19, 42, 56, 55, 57, 67, 23, 75, 58,
		54, 7, 81, 87, 22, 39, 41, 60, 40, 29, 103, 0, 25,
		1, 47, 101, 77, 63, 115, 53, 31, 80, 86, 92, 37, 20,
		79, 10, 105 };
	Dtype output_data[] = { 2, 1, 2, 0, 0, 1, 1, 2, 2, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 2, 0,
		0, 1, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 1, 2 };
	caffe_copy(blob_bottom_->count(), input_data, blob_bottom_->mutable_cpu_data());

	LayerParameter layer_param;
	ArgMaxParameter* argmax_param = layer_param.mutable_argmax_param();
	argmax_param->set_out_max_val(true);

	ArgMaxMinLayer<Dtype> layer(layer_param);
	layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);

	EXPECT_EQ(this->blob_top_->num(), this->blob_bottom_->num());
	EXPECT_EQ(this->blob_top_->channels(), 1);
	EXPECT_EQ(this->blob_top_->height(), this->blob_bottom_->height());
	EXPECT_EQ(this->blob_top_->width(), this->blob_bottom_->width());

	layer.Forward(blob_bottom_vec_, blob_top_vec_);
	const Dtype min_precision = 1e-5;
	for (int i = 0; i < blob_top_->count(); i++)
	{

		EXPECT_NEAR(this->blob_top_->cpu_data()[i], output_data[i], min_precision)
			<< "(top_data1,gt_data)=" << this->blob_top_->cpu_data()[i] << ","
			<< output_data[i];

	}
}
TYPED_TEST(ArgMaxMinLayerTest, TestArgMin) {
	typedef typename TypeParam::Dtype Dtype;
	Dtype input_data[] = { 13, 30, 64, 102, 116, 59, 76, 33, 6, 68, 21, 3, 46,
		49, 2, 119, 61, 62, 45, 110, 73, 50, 95, 16, 114, 65,
		104, 9, 78, 84, 12, 36, 69, 83, 112, 90, 72, 111, 85,
		106, 82, 26, 118, 15, 18, 44, 74, 51, 107, 70, 5, 98,
		93, 17, 4, 108, 32, 100, 11, 35, 14, 66, 28, 71, 27,
		89, 34, 38, 91, 99, 88, 117, 97, 43, 113, 8, 109, 96,
		52, 48, 94, 24, 19, 42, 56, 55, 57, 67, 23, 75, 58,
		54, 7, 81, 87, 22, 39, 41, 60, 40, 29, 103, 0, 25,
		1, 47, 101, 77, 63, 115, 53, 31, 80, 86, 92, 37, 20,
		79, 10, 105 };
	Dtype output_data[] = { 0, 2, 0, 2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 2, 2, 0, 1, 2,
		2, 2, 2, 0, 0, 1, 1, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1 };
	caffe_copy(blob_bottom_->count(), input_data, blob_bottom_->mutable_cpu_data());

	LayerParameter layer_param;
	ArgMaxParameter* argmax_param = layer_param.mutable_argmax_param();
	argmax_param->set_out_max_val(false);

	ArgMaxMinLayer<Dtype> layer(layer_param);
	layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);

	EXPECT_EQ(this->blob_top_->num(), this->blob_bottom_->num());
	EXPECT_EQ(this->blob_top_->channels(), 1);
	EXPECT_EQ(this->blob_top_->height(), this->blob_bottom_->height());
	EXPECT_EQ(this->blob_top_->width(), this->blob_bottom_->width());

	layer.Forward(blob_bottom_vec_, blob_top_vec_);
	const Dtype min_precision = 1e-5;
	for (int i = 0; i < blob_top_->count(); i++)
	{

		EXPECT_NEAR(this->blob_top_->cpu_data()[i], output_data[i], min_precision)
			<< "(top_data1,gt_data)=" << this->blob_top_->cpu_data()[i] << ","
			<< output_data[i];

	}
}

TYPED_TEST(ArgMaxMinLayerTest, TestArgMax2) {
	typedef typename TypeParam::Dtype Dtype;
	Dtype input_data[] = { 3.41106388e-01, 5.66525035e-01, 2.67835965e-02,
		8.92680509e-01, 1.10642740e-01, 2.41195112e-01,
		9.07964133e-01, 4.39277725e-01, 5.62272254e-01,
		6.52516691e-02, 6.25337310e-01, 5.77842059e-01,
		8.96702274e-01, 9.92275660e-01, 4.57893356e-01,
		3.41624902e-02, 6.24134878e-01, 7.32862392e-02,
		5.38967731e-01, 3.41111213e-01, 4.26953762e-01,
		8.41484312e-01, 8.65857258e-01, 6.32609322e-01,
		2.55426105e-01, 5.16343982e-01, 7.81399979e-02,
		8.74429751e-01, 2.27301961e-01, 6.39061198e-01,
		9.41213988e-01, 7.02794998e-01, 3.39777957e-01,
		3.84210804e-01, 8.29153390e-01, 8.60208300e-01,
		5.82711263e-02, 1.32142788e-01, 5.35097032e-01,
		8.58334664e-01, 8.06917562e-01, 6.93710539e-01,
		8.55708341e-01, 3.90316240e-01, 8.15810950e-04,
		8.03732556e-01, 8.86205209e-01, 1.03827651e-01,
		5.33768079e-01, 5.94455173e-01, 5.47304806e-01,
		8.04755293e-01, 4.67063619e-01, 1.91980084e-01,
		1.00698270e-01, 6.49022528e-01, 1.39822959e-01,
		8.99750523e-01, 1.37960979e-01, 2.00876423e-01,
		5.09860366e-01, 4.96626864e-02, 2.83903171e-01,
		4.76182657e-01, 9.63449606e-01, 2.61146769e-01,
		5.74920086e-03, 7.26236127e-01, 2.44067026e-01,
		4.29641934e-01, 8.24145851e-01, 7.99660998e-01,
		3.40219657e-01, 5.23911013e-01, 5.95563021e-01,
		6.73639894e-01, 5.09662437e-01, 4.24590958e-01,
		1.65769392e-01, 5.51178825e-01, 6.85207955e-01,
		9.16385408e-01, 4.21361985e-01, 9.06985512e-01,
		4.67208295e-01, 9.52308684e-01, 1.23307214e-01,
		7.17843846e-01, 1.24514499e-01, 5.81218101e-01,
		2.82211544e-01, 3.01427708e-01, 1.92252398e-01,
		3.17720654e-01, 9.32281019e-03, 9.62973168e-01,
		1.93095546e-01, 1.88661066e-01, 8.08083860e-01,
		8.19398686e-01, 6.17358008e-01, 3.94007354e-01,
		1.68774222e-01, 8.98198508e-01, 6.24038474e-01,
		9.36553715e-02, 1.86646753e-01, 6.93717262e-01,
		5.76729939e-01, 8.60842103e-01, 7.88366968e-01,
		5.22943743e-01, 6.28375549e-02, 3.57346888e-01,
		7.07925737e-01, 1.33397671e-01, 5.16835722e-01,
		9.53645030e-01, 5.02747879e-01, 8.41601960e-01,
		8.25943386e-01, 5.93908172e-01, 1.97096592e-01,
		4.22660353e-01, 5.36109874e-01, 7.63037494e-01,
		1.03749738e-01, 7.51618744e-01, 3.53654032e-01,
		5.01031146e-01, 1.51247078e-01, 2.54773519e-01,
		5.23658189e-01, 4.35971259e-01, 7.71773276e-01,
		5.61405766e-02, 7.65325323e-01, 1.94578514e-01,
		5.67154689e-01, 7.83892358e-01, 5.96501081e-01,
		9.67514640e-01, 5.54532298e-01, 2.97108920e-01,
		7.03536604e-01, 4.22740782e-01, 3.58007854e-01,
		2.75479690e-01, 9.37884607e-01, 4.53031516e-01,
		3.36985831e-01, 5.29375085e-01, 7.13719820e-01,
		2.83244960e-01, 1.60779862e-01, 3.88086067e-01,
		6.45796927e-01, 8.84337813e-01, 6.48947555e-01,
		6.17908455e-01, 9.51969303e-01, 9.07448472e-01,
		4.94082887e-01, 8.23525340e-03, 9.55969173e-01,
		9.92959220e-01, 8.31130580e-01, 7.01931099e-01,
		3.19982340e-01, 1.70161967e-01, 1.59322938e-01,
		8.51055854e-01, 6.97356020e-01, 3.13025424e-01,
		8.36554936e-01, 5.56674149e-01, 6.24390591e-01,
		5.21462524e-01, 2.55569306e-01, 8.41128787e-01,
		8.18549513e-02, 6.13010916e-01, 4.46794081e-01,
		8.88156505e-01, 7.54561365e-01, 2.79714280e-01,
		7.63414815e-01, 3.82119969e-01, 8.01167148e-01,
		1.79669635e-01, 9.22538896e-01, 2.90776084e-01,
		4.51808754e-01, 9.97301779e-01, 5.94705927e-01,
		2.45751114e-01, 8.03187742e-01, 4.44896427e-01,
		4.68112565e-02, 8.36072027e-01, 7.91137482e-01,
		3.95251703e-01, 8.38503732e-01, 2.76328573e-01,
		8.00972565e-01, 9.53224829e-01, 7.43621290e-01,
		6.88140580e-01, 5.69711145e-01, 6.37166707e-01,
		9.94030154e-01, 4.95478073e-01, 3.84045584e-01,
		7.99307256e-01, 9.74815796e-01, 2.45075091e-01,
		9.49067173e-01, 5.68923917e-02, 2.46488167e-01,
		2.72845442e-01, 6.66450611e-01, 9.33665127e-01,
		7.45991064e-02, 5.17315236e-01, 7.84757754e-01,
		9.55302796e-02, 7.71386881e-01, 2.93776783e-01,
		7.67000199e-01, 9.29149287e-02, 3.18523179e-02,
		1.47566981e-01, 5.28560661e-01, 5.44866923e-01,
		5.27548650e-01, 3.30108549e-01, 2.18511851e-01,
		3.22539578e-01, 4.38754999e-01, 2.58049440e-01,
		7.65766128e-01, 5.52327684e-01, 8.41199231e-01,
		9.59827938e-01, 8.32672550e-01, 6.58001236e-01,
		7.25426193e-01, 8.01906368e-01, 6.90020634e-01,
		9.34165084e-01, 9.21547260e-02, 2.84340056e-01,
		4.97270911e-01, 7.75659223e-02, 4.93210542e-01,
		8.34377042e-01, 6.51368724e-01, 1.78897673e-02,
		5.91706014e-01, 7.72020085e-01, 4.36015358e-01,
		4.97728367e-01, 7.42357497e-01, 6.70490987e-01,
		8.29840239e-01, 3.44068188e-01, 8.90249492e-01,
		1.58208078e-01, 5.79331375e-01, 9.43486935e-02,
		3.39160978e-01, 2.44102672e-01, 7.54034896e-01,
		3.47681608e-01, 9.04343720e-01, 1.31834784e-02,
		3.53091610e-01, 3.94370108e-01, 7.98580314e-01,
		6.42720598e-01, 1.06646357e-01, 5.07981302e-01,
		9.67289289e-01, 9.31154427e-01, 1.81686698e-01,
		1.00122317e-01, 3.79107716e-01, 3.89048290e-01,
		3.34680276e-01, 5.37783558e-02, 3.09800416e-01,
		2.66088770e-01, 6.21457048e-01, 1.49569840e-01,
		8.75809109e-01, 2.18954680e-01, 5.33679660e-01,
		9.55350973e-01, 3.46823051e-01, 7.00923302e-01,
		8.42926483e-01, 7.26525743e-01, 7.92776326e-01,
		6.34030435e-01, 3.00771548e-01, 6.33921886e-01,
		4.72352650e-01, 6.06165971e-02, 4.51289449e-01,
		1.28762380e-01, 5.17946649e-01, 2.38915379e-01,
		7.87696757e-01, 7.69871963e-01, 2.74439433e-01,
		7.65558005e-01, 8.84700079e-01, 8.72987078e-01,
		9.83938946e-01, 5.34911888e-01, 6.79289830e-02,
		1.87159835e-01, 1.33651654e-01, 8.03894797e-01,
		6.58968799e-01, 6.00231330e-01, 6.00381029e-01,
		3.09290044e-01, 6.14210796e-01, 3.77516686e-01,
		6.83540997e-01, 1.13794857e-01, 5.14836181e-01,
		7.02087839e-01, 6.83989611e-01, 8.62976823e-01,
		4.48529648e-01, 4.25756966e-01, 8.71042738e-01,
		1.16946238e-02, 2.49964989e-01, 7.44700342e-02,
		4.62742202e-01, 2.36236522e-01, 1.49532921e-01,
		9.55732264e-01, 3.80547689e-01, 5.15060862e-01,
		1.18432667e-02, 3.22381483e-01, 3.71635161e-01,
		7.79489818e-01, 8.19853279e-01, 9.46285426e-01,
		3.25210142e-01, 2.95408175e-02, 7.42847423e-01,
		6.81582175e-01, 5.31943621e-01, 4.37899148e-01,
		7.31338263e-03, 2.54132789e-01, 6.39937753e-01,
		4.29132922e-01, 4.62426406e-01, 3.23459919e-01,
		9.61481069e-01, 5.79113027e-01, 5.96570944e-02,
		2.40981361e-01, 3.44168536e-01, 3.67072654e-01,
		8.56571998e-01, 9.50600693e-01, 4.33564923e-01,
		2.65347742e-01, 4.56725208e-01, 2.54136207e-02,
		5.14396329e-01, 7.87335918e-02, 3.26393311e-01,
		4.68898612e-01, 9.21229022e-01, 7.11095308e-01,
		8.07808658e-01, 3.27997970e-01, 6.02767375e-02,
		2.79085854e-01, 8.92490256e-02, 8.82087901e-01,
		1.62564721e-01, 2.76655213e-01, 4.46401604e-01,
		1.72637901e-01, 8.98520774e-01, 2.49090495e-01,
		2.67082994e-01, 5.65342906e-01, 4.00427236e-01,
		6.54540285e-01 };
		Dtype output_data[] = { 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0,
			0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0,
			0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1,
			0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
			1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
			1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0,
			1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0 };
	caffe_copy(blob_bottom_1->count(), input_data, blob_bottom_1->mutable_cpu_data());

	LayerParameter layer_param;
	ArgMaxParameter* argmax_param = layer_param.mutable_argmax_param();
	argmax_param->set_out_max_val(true);

	ArgMaxMinLayer<Dtype> layer(layer_param);
	layer.SetUp(this->blob_bottom_vec_1, this->blob_top_vec_1);

	EXPECT_EQ(this->blob_top_1->num(), this->blob_bottom_1->num());
	EXPECT_EQ(this->blob_top_1->channels(), 1);
	EXPECT_EQ(this->blob_top_1->height(), this->blob_bottom_1->height());
	EXPECT_EQ(this->blob_top_1->width(), this->blob_bottom_1->width());

	layer.Forward(blob_bottom_vec_1, blob_top_vec_1);
	const Dtype min_precision = 1e-5;
	for (int i = 0; i < blob_top_1->count(); i++)
	{

		EXPECT_NEAR(this->blob_top_1->cpu_data()[i], output_data[i], min_precision)
			<< "(top_data1,gt_data)=" << this->blob_top_1->cpu_data()[i] << ","
			<< output_data[i];

	}
}
TYPED_TEST(ArgMaxMinLayerTest, TestArgMin2) {
	typedef typename TypeParam::Dtype Dtype;
	Dtype input_data[] = { 3.41106388e-01, 5.66525035e-01, 2.67835965e-02,
		8.92680509e-01, 1.10642740e-01, 2.41195112e-01,
		9.07964133e-01, 4.39277725e-01, 5.62272254e-01,
		6.52516691e-02, 6.25337310e-01, 5.77842059e-01,
		8.96702274e-01, 9.92275660e-01, 4.57893356e-01,
		3.41624902e-02, 6.24134878e-01, 7.32862392e-02,
		5.38967731e-01, 3.41111213e-01, 4.26953762e-01,
		8.41484312e-01, 8.65857258e-01, 6.32609322e-01,
		2.55426105e-01, 5.16343982e-01, 7.81399979e-02,
		8.74429751e-01, 2.27301961e-01, 6.39061198e-01,
		9.41213988e-01, 7.02794998e-01, 3.39777957e-01,
		3.84210804e-01, 8.29153390e-01, 8.60208300e-01,
		5.82711263e-02, 1.32142788e-01, 5.35097032e-01,
		8.58334664e-01, 8.06917562e-01, 6.93710539e-01,
		8.55708341e-01, 3.90316240e-01, 8.15810950e-04,
		8.03732556e-01, 8.86205209e-01, 1.03827651e-01,
		5.33768079e-01, 5.94455173e-01, 5.47304806e-01,
		8.04755293e-01, 4.67063619e-01, 1.91980084e-01,
		1.00698270e-01, 6.49022528e-01, 1.39822959e-01,
		8.99750523e-01, 1.37960979e-01, 2.00876423e-01,
		5.09860366e-01, 4.96626864e-02, 2.83903171e-01,
		4.76182657e-01, 9.63449606e-01, 2.61146769e-01,
		5.74920086e-03, 7.26236127e-01, 2.44067026e-01,
		4.29641934e-01, 8.24145851e-01, 7.99660998e-01,
		3.40219657e-01, 5.23911013e-01, 5.95563021e-01,
		6.73639894e-01, 5.09662437e-01, 4.24590958e-01,
		1.65769392e-01, 5.51178825e-01, 6.85207955e-01,
		9.16385408e-01, 4.21361985e-01, 9.06985512e-01,
		4.67208295e-01, 9.52308684e-01, 1.23307214e-01,
		7.17843846e-01, 1.24514499e-01, 5.81218101e-01,
		2.82211544e-01, 3.01427708e-01, 1.92252398e-01,
		3.17720654e-01, 9.32281019e-03, 9.62973168e-01,
		1.93095546e-01, 1.88661066e-01, 8.08083860e-01,
		8.19398686e-01, 6.17358008e-01, 3.94007354e-01,
		1.68774222e-01, 8.98198508e-01, 6.24038474e-01,
		9.36553715e-02, 1.86646753e-01, 6.93717262e-01,
		5.76729939e-01, 8.60842103e-01, 7.88366968e-01,
		5.22943743e-01, 6.28375549e-02, 3.57346888e-01,
		7.07925737e-01, 1.33397671e-01, 5.16835722e-01,
		9.53645030e-01, 5.02747879e-01, 8.41601960e-01,
		8.25943386e-01, 5.93908172e-01, 1.97096592e-01,
		4.22660353e-01, 5.36109874e-01, 7.63037494e-01,
		1.03749738e-01, 7.51618744e-01, 3.53654032e-01,
		5.01031146e-01, 1.51247078e-01, 2.54773519e-01,
		5.23658189e-01, 4.35971259e-01, 7.71773276e-01,
		5.61405766e-02, 7.65325323e-01, 1.94578514e-01,
		5.67154689e-01, 7.83892358e-01, 5.96501081e-01,
		9.67514640e-01, 5.54532298e-01, 2.97108920e-01,
		7.03536604e-01, 4.22740782e-01, 3.58007854e-01,
		2.75479690e-01, 9.37884607e-01, 4.53031516e-01,
		3.36985831e-01, 5.29375085e-01, 7.13719820e-01,
		2.83244960e-01, 1.60779862e-01, 3.88086067e-01,
		6.45796927e-01, 8.84337813e-01, 6.48947555e-01,
		6.17908455e-01, 9.51969303e-01, 9.07448472e-01,
		4.94082887e-01, 8.23525340e-03, 9.55969173e-01,
		9.92959220e-01, 8.31130580e-01, 7.01931099e-01,
		3.19982340e-01, 1.70161967e-01, 1.59322938e-01,
		8.51055854e-01, 6.97356020e-01, 3.13025424e-01,
		8.36554936e-01, 5.56674149e-01, 6.24390591e-01,
		5.21462524e-01, 2.55569306e-01, 8.41128787e-01,
		8.18549513e-02, 6.13010916e-01, 4.46794081e-01,
		8.88156505e-01, 7.54561365e-01, 2.79714280e-01,
		7.63414815e-01, 3.82119969e-01, 8.01167148e-01,
		1.79669635e-01, 9.22538896e-01, 2.90776084e-01,
		4.51808754e-01, 9.97301779e-01, 5.94705927e-01,
		2.45751114e-01, 8.03187742e-01, 4.44896427e-01,
		4.68112565e-02, 8.36072027e-01, 7.91137482e-01,
		3.95251703e-01, 8.38503732e-01, 2.76328573e-01,
		8.00972565e-01, 9.53224829e-01, 7.43621290e-01,
		6.88140580e-01, 5.69711145e-01, 6.37166707e-01,
		9.94030154e-01, 4.95478073e-01, 3.84045584e-01,
		7.99307256e-01, 9.74815796e-01, 2.45075091e-01,
		9.49067173e-01, 5.68923917e-02, 2.46488167e-01,
		2.72845442e-01, 6.66450611e-01, 9.33665127e-01,
		7.45991064e-02, 5.17315236e-01, 7.84757754e-01,
		9.55302796e-02, 7.71386881e-01, 2.93776783e-01,
		7.67000199e-01, 9.29149287e-02, 3.18523179e-02,
		1.47566981e-01, 5.28560661e-01, 5.44866923e-01,
		5.27548650e-01, 3.30108549e-01, 2.18511851e-01,
		3.22539578e-01, 4.38754999e-01, 2.58049440e-01,
		7.65766128e-01, 5.52327684e-01, 8.41199231e-01,
		9.59827938e-01, 8.32672550e-01, 6.58001236e-01,
		7.25426193e-01, 8.01906368e-01, 6.90020634e-01,
		9.34165084e-01, 9.21547260e-02, 2.84340056e-01,
		4.97270911e-01, 7.75659223e-02, 4.93210542e-01,
		8.34377042e-01, 6.51368724e-01, 1.78897673e-02,
		5.91706014e-01, 7.72020085e-01, 4.36015358e-01,
		4.97728367e-01, 7.42357497e-01, 6.70490987e-01,
		8.29840239e-01, 3.44068188e-01, 8.90249492e-01,
		1.58208078e-01, 5.79331375e-01, 9.43486935e-02,
		3.39160978e-01, 2.44102672e-01, 7.54034896e-01,
		3.47681608e-01, 9.04343720e-01, 1.31834784e-02,
		3.53091610e-01, 3.94370108e-01, 7.98580314e-01,
		6.42720598e-01, 1.06646357e-01, 5.07981302e-01,
		9.67289289e-01, 9.31154427e-01, 1.81686698e-01,
		1.00122317e-01, 3.79107716e-01, 3.89048290e-01,
		3.34680276e-01, 5.37783558e-02, 3.09800416e-01,
		2.66088770e-01, 6.21457048e-01, 1.49569840e-01,
		8.75809109e-01, 2.18954680e-01, 5.33679660e-01,
		9.55350973e-01, 3.46823051e-01, 7.00923302e-01,
		8.42926483e-01, 7.26525743e-01, 7.92776326e-01,
		6.34030435e-01, 3.00771548e-01, 6.33921886e-01,
		4.72352650e-01, 6.06165971e-02, 4.51289449e-01,
		1.28762380e-01, 5.17946649e-01, 2.38915379e-01,
		7.87696757e-01, 7.69871963e-01, 2.74439433e-01,
		7.65558005e-01, 8.84700079e-01, 8.72987078e-01,
		9.83938946e-01, 5.34911888e-01, 6.79289830e-02,
		1.87159835e-01, 1.33651654e-01, 8.03894797e-01,
		6.58968799e-01, 6.00231330e-01, 6.00381029e-01,
		3.09290044e-01, 6.14210796e-01, 3.77516686e-01,
		6.83540997e-01, 1.13794857e-01, 5.14836181e-01,
		7.02087839e-01, 6.83989611e-01, 8.62976823e-01,
		4.48529648e-01, 4.25756966e-01, 8.71042738e-01,
		1.16946238e-02, 2.49964989e-01, 7.44700342e-02,
		4.62742202e-01, 2.36236522e-01, 1.49532921e-01,
		9.55732264e-01, 3.80547689e-01, 5.15060862e-01,
		1.18432667e-02, 3.22381483e-01, 3.71635161e-01,
		7.79489818e-01, 8.19853279e-01, 9.46285426e-01,
		3.25210142e-01, 2.95408175e-02, 7.42847423e-01,
		6.81582175e-01, 5.31943621e-01, 4.37899148e-01,
		7.31338263e-03, 2.54132789e-01, 6.39937753e-01,
		4.29132922e-01, 4.62426406e-01, 3.23459919e-01,
		9.61481069e-01, 5.79113027e-01, 5.96570944e-02,
		2.40981361e-01, 3.44168536e-01, 3.67072654e-01,
		8.56571998e-01, 9.50600693e-01, 4.33564923e-01,
		2.65347742e-01, 4.56725208e-01, 2.54136207e-02,
		5.14396329e-01, 7.87335918e-02, 3.26393311e-01,
		4.68898612e-01, 9.21229022e-01, 7.11095308e-01,
		8.07808658e-01, 3.27997970e-01, 6.02767375e-02,
		2.79085854e-01, 8.92490256e-02, 8.82087901e-01,
		1.62564721e-01, 2.76655213e-01, 4.46401604e-01,
		1.72637901e-01, 8.98520774e-01, 2.49090495e-01,
		2.67082994e-01, 5.65342906e-01, 4.00427236e-01,
		6.54540285e-01 };
		Dtype output_data[] = { 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
			1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1,
			1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
			1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
			0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
			0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0,
			0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1,
			0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1 };
	caffe_copy(blob_bottom_1->count(), input_data, blob_bottom_1->mutable_cpu_data());

	LayerParameter layer_param;
	ArgMaxParameter* argmax_param = layer_param.mutable_argmax_param();
	argmax_param->set_out_max_val(false);

	ArgMaxMinLayer<Dtype> layer(layer_param);
	layer.SetUp(this->blob_bottom_vec_1, this->blob_top_vec_1);

	EXPECT_EQ(this->blob_top_1->num(), this->blob_bottom_1->num());
	EXPECT_EQ(this->blob_top_1->channels(), 1);
	EXPECT_EQ(this->blob_top_1->height(), this->blob_bottom_1->height());
	EXPECT_EQ(this->blob_top_1->width(), this->blob_bottom_1->width());

	layer.Forward(blob_bottom_vec_1, blob_top_vec_1);
	const Dtype min_precision = 1e-5;
	for (int i = 0; i < blob_top_1->count(); i++)
	{

		EXPECT_NEAR(this->blob_top_1->cpu_data()[i], output_data[i], min_precision)
			<< "(top_data1,gt_data)=" << this->blob_top_1->cpu_data()[i] << ","
			<< output_data[i];

	}
}
}  // namespace caffe
