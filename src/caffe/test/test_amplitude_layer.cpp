#include <algorithm>
#include <vector>

#include "gtest/gtest.h"

#include "caffe/blob.hpp"
#include "caffe/common.hpp"
#include "caffe/common_layers.hpp"
#include "caffe/filler.hpp"
#include "caffe/vision_layers.hpp"
#include "caffe/test/test_caffe_main.hpp"
#include "caffe/test/test_gradient_check_util.hpp"

namespace caffe {
	template <typename TypeParam>
	class AmplitudeTest : public MultiDeviceTest<TypeParam> 
	{
		typedef typename TypeParam::Dtype Dtype;
	protected:
		AmplitudeTest() :blob_bottom_(new Blob<Dtype>(2, 11, 5, 7)),
			blob_top_(new Blob<Dtype>())
		{
			Caffe::set_random_seed(1701);
			FillerParameter filler_param;
			blob_bottom_vec_.push_back(blob_bottom_);
			blob_top_vec_.push_back(blob_top_);
		}

		virtual ~AmplitudeTest() { delete blob_bottom_; delete blob_top_; }


		Blob<Dtype>* const blob_bottom_;
		Blob<Dtype>* const blob_top_;
		vector<Blob<Dtype>*> blob_bottom_vec_;
		vector<Blob<Dtype>*> blob_top_vec_;
	};

	TYPED_TEST_CASE(AmplitudeTest, TestDtypesAndDevices);

	TYPED_TEST(AmplitudeTest, TestForward)
	{
		typedef typename TypeParam::Dtype Dtype;
		caffe_set(blob_bottom_vec_[0]->count(), (Dtype)1, blob_bottom_vec_[0]->mutable_cpu_data());

		LayerParameter layer_param;
		AmplitudeLayer<Dtype> layer(layer_param);
		layer.SetUp(blob_bottom_vec_, blob_top_vec_);
		EXPECT_EQ(this->blob_top_->num(), this->blob_bottom_->num())
			<< "(top_num,bottom_num)=" << this->blob_top_->num() << ","
			<< this->blob_bottom_->num();
		EXPECT_EQ(this->blob_top_->channels(), 1)
			<< "(top_channels,bottom_channels)=" << this->blob_top_->channels() << ","
			<< this->blob_bottom_->channels();
		EXPECT_EQ(this->blob_top_->height(), this->blob_bottom_->height())
			<< "(top_height,bottom_height)=" << this->blob_top_->height() << ","
			<< this->blob_bottom_->height();
		EXPECT_EQ(this->blob_top_->width(), this->blob_bottom_->width())
			<< "(top_width,bottom_width)=" << this->blob_top_->width() << ","
			<< this->blob_bottom_->width();

		layer.Forward(blob_bottom_vec_, blob_top_vec_);
		for (int i = 0; i < blob_top_->count(); i++)
		{
			EXPECT_EQ(this->blob_top_->cpu_data()[i], 2)
				<< "(top_data,gt_data)=" << this->blob_top_->cpu_data()[i] << ","
				<< 2;
		}
	}
	TYPED_TEST(AmplitudeTest, TestForward2)
	{
		typedef typename TypeParam::Dtype Dtype;
		Dtype input_data[] = { 5.89714582e-01, 6.84870693e-01, 8.67204621e-01,
			8.01589485e-01, 9.24952755e-01, 7.56882449e-01,
			1.00798388e-01, 3.15204052e-01, 6.47140669e-01,
			8.42354648e-01, 3.40497598e-03, 4.14807683e-01,
			3.65168743e-01, 7.05529055e-01, 7.32652966e-01,
			9.49943365e-01, 1.96247968e-01, 9.47541910e-02,
			7.32271234e-01, 9.39463993e-01, 2.55847823e-01,
			6.11251337e-01, 8.59253932e-01, 6.12919859e-02,
			2.66880444e-01, 4.71690819e-01, 1.89254213e-01,
			4.09906622e-01, 8.23192562e-01, 8.89124055e-01,
			3.84262059e-02, 1.92704091e-01, 5.73978689e-02,
			6.01996351e-01, 1.31045632e-01, 6.58263774e-01,
			7.13779955e-01, 4.63455400e-01, 2.33237177e-01,
			8.02397073e-01, 9.85027351e-01, 1.41440907e-02,
			6.29622951e-01, 4.98112922e-01, 5.24197385e-02,
			1.39284925e-01, 3.79210572e-02, 6.80528702e-01,
			9.19484077e-01, 3.29553631e-01, 6.30277901e-01,
			6.86461792e-01, 6.82704112e-01, 1.02129379e-02,
			5.48605143e-01, 4.56658995e-01, 9.15051345e-01,
			1.13136990e-01, 4.58692047e-02, 2.95998627e-01,
			7.05453812e-02, 2.98862039e-01, 2.40540013e-01,
			3.75957069e-01, 5.42738409e-02, 3.65809132e-01,
			2.62080141e-01, 7.31391133e-01, 1.60616098e-01,
			3.98516623e-01, 8.14246161e-01, 5.96811151e-01,
			2.45078079e-01, 5.39680216e-01, 6.58614673e-01,
			7.51407175e-01, 5.52458487e-01, 1.07121277e-01,
			2.52115321e-01, 9.88617573e-01, 8.00965346e-01,
			2.18047765e-01, 9.70750476e-01, 6.03452391e-01,
			6.97984768e-01, 9.20346411e-01, 8.70776462e-01,
			8.74218257e-01, 2.76351248e-01, 1.94553605e-01,
			8.99468767e-01, 9.94505791e-01, 8.69425653e-01,
			7.69898623e-01, 4.56863631e-01, 3.31927173e-01,
			3.51470747e-01, 5.06900890e-01, 6.22182690e-01,
			3.77794841e-01, 6.30753673e-01, 8.99192292e-01,
			8.66654780e-01, 9.04989016e-01, 7.21866882e-01,
			8.47802259e-01, 9.77440658e-01, 5.95350369e-01,
			5.88609799e-02, 5.17714459e-01, 5.22147912e-01,
			8.59002151e-01, 6.45016045e-01, 4.51735358e-01,
			2.81678592e-01, 1.90577299e-01, 9.31185734e-01,
			5.67114901e-02, 9.41232036e-01, 6.31365489e-02,
			3.13348972e-02, 7.83056638e-01, 8.62839512e-01,
			9.15809319e-01, 6.71530726e-01, 4.13472307e-01,
			9.35888667e-01, 5.26260935e-02, 8.07041527e-01,
			7.21514274e-01, 2.97800551e-01, 8.08952104e-01,
			9.31887282e-01, 3.75033921e-01, 6.23167720e-02,
			6.12403137e-01, 8.88701862e-01, 3.33582170e-01,
			9.01989572e-01, 9.19950121e-01, 6.87809245e-01,
			3.82903871e-01, 4.80089191e-02, 5.39951951e-01,
			4.62360726e-01, 4.19915633e-01, 2.97983918e-01,
			2.19550006e-01, 8.66080443e-02, 5.13731786e-01,
			3.57973484e-01, 7.48517417e-01, 7.32972923e-01,
			7.13653989e-01, 9.81518407e-01, 3.08592304e-01,
			5.51608871e-01, 1.72869636e-01, 5.33118334e-01,
			3.13455114e-01, 3.81739960e-01, 1.61093646e-01,
			7.77003137e-01, 3.70976972e-01, 2.30221311e-01,
			2.03517347e-02, 5.40412151e-01, 9.55383136e-01,
			1.04701791e-01, 3.51789325e-01, 8.91390320e-01,
			7.93460524e-01, 5.99091378e-01, 8.48378709e-01,
			8.84427131e-02, 5.27179810e-01, 4.96528927e-01,
			1.20018647e-01, 4.84078529e-01, 1.49051637e-01,
			7.34603549e-01, 8.98720741e-01, 5.61510702e-01,
			8.37700416e-01, 6.41266506e-01, 6.30021985e-01,
			6.72596351e-01, 8.72119829e-01, 1.59071305e-01,
			6.18994828e-01, 3.94016877e-01, 6.53014331e-01,
			4.93027664e-01, 8.26328487e-01, 4.35586161e-01,
			9.45445584e-01, 1.94322200e-01, 5.76777762e-01,
			1.22502013e-01, 8.24931503e-01, 4.03383960e-01,
			5.33693911e-01, 4.54217975e-01, 4.16303825e-01,
			1.05306933e-01, 6.36813120e-01, 7.48501734e-01,
			9.30256856e-01, 3.58331826e-01, 6.19543294e-02,
			9.42555962e-01, 8.11301889e-01, 4.30635085e-02,
			5.55992041e-01, 3.03250533e-01, 9.42634495e-01,
			4.87749571e-01, 2.30918843e-01, 4.83678247e-01,
			7.06666832e-01, 1.98744038e-01, 7.65158231e-01,
			1.61701528e-01, 8.88605975e-01, 7.06402217e-01,
			7.97663491e-01, 5.26426356e-02, 8.30583447e-01,
			3.06389215e-01, 1.83715886e-01, 7.30623663e-01,
			8.97919745e-01, 6.19424701e-01, 8.29989017e-01,
			8.48808928e-01, 3.89114098e-02, 1.75211408e-01,
			3.08179942e-01, 1.89615085e-01, 1.74393796e-01,
			3.31619683e-01, 9.75073324e-01, 6.58162619e-01,
			9.21942659e-01, 6.18914285e-01, 4.48357380e-01,
			6.04561876e-01, 9.91320370e-01, 1.47637730e-01,
			1.37516244e-01, 9.96458488e-01, 8.12595875e-01,
			2.45446951e-01, 3.37333107e-01, 4.13519984e-01,
			8.56484554e-01, 9.59568582e-01, 6.36769299e-01,
			4.67786732e-01, 4.80179783e-01, 7.62007895e-01,
			5.99100036e-01, 2.97225225e-01, 7.10269642e-01,
			3.05895263e-01, 4.40702252e-01, 8.14778378e-01,
			6.36236997e-01, 1.24302025e-01, 8.85970348e-01,
			9.95742309e-01, 8.21563248e-02, 7.43319810e-01,
			7.23871909e-01, 1.27465241e-01, 6.55813047e-01,
			1.12095917e-01, 4.49911195e-01, 4.42528543e-01,
			2.72077876e-01, 1.86515290e-01, 6.93042739e-01,
			1.04807029e-01, 2.29335669e-01, 8.30217428e-01,
			4.98120211e-01, 3.66438193e-01, 9.46684015e-01,
			8.71845692e-01, 6.65920593e-01, 3.46294636e-01,
			7.60589396e-01, 6.54468748e-02, 4.02310610e-01,
			9.71328944e-01, 8.64712875e-02, 3.97909585e-01,
			6.82585079e-01, 2.16892773e-01, 8.01148742e-01,
			8.99689084e-01, 2.90434704e-01, 1.63365425e-01,
			9.91236753e-01, 3.49769585e-01, 2.96525783e-02,
			3.64834990e-02, 6.72876192e-01, 6.42679127e-02,
			1.05023684e-01, 8.52214207e-01, 8.52464325e-01,
			5.93125182e-01, 5.78043282e-01, 3.08315474e-01,
			2.76570385e-01, 9.75797766e-01, 2.34881742e-02,
			9.69516402e-01, 7.69920381e-01, 1.23038489e-01,
			2.82101423e-01, 8.64583783e-01, 6.90920474e-01,
			4.86141016e-01, 5.92398209e-01, 7.34075173e-01,
			2.44579555e-01, 5.90857178e-02, 7.77217858e-01,
			1.52450908e-01, 9.01881400e-01, 3.36066637e-01,
			1.16756950e-01, 3.29876208e-01, 6.67470562e-01,
			4.02577461e-01, 3.51267397e-01, 7.42012211e-01,
			4.15335023e-01, 6.82597021e-01, 4.90935585e-01,
			7.22717461e-02, 7.33703613e-01, 5.45139574e-01,
			1.19761293e-01, 4.55689414e-01, 2.34779718e-01,
			8.81905095e-01, 2.76953251e-01, 7.43077320e-01,
			3.42767113e-01, 3.52130539e-01, 3.47993101e-01,
			2.41725524e-01, 2.84156854e-01, 7.37440458e-01,
			7.47728645e-01, 7.53941020e-01, 7.57739046e-01,
			1.43615548e-01, 4.35366917e-01, 9.60999341e-01,
			6.93987202e-01, 7.63869429e-01, 4.43266913e-01,
			4.36576294e-01, 9.80876856e-01, 6.72701423e-02,
			8.07482352e-01, 1.92366709e-01, 3.87867832e-01,
			4.96909349e-01, 3.06529257e-01, 2.53618771e-01,
			5.65619804e-01, 9.04572320e-01, 4.10080329e-01,
			1.69567490e-01, 9.99016081e-01, 2.77760392e-01,
			7.62079088e-01, 1.76018831e-01, 8.60425684e-01,
			1.27564128e-01, 7.27461894e-01, 6.56627897e-01,
			6.13308981e-03, 7.66791214e-01, 9.28653038e-02,
			6.49338748e-01, 9.49983702e-01, 7.94747590e-01,
			9.82919838e-01, 7.20264053e-01, 8.04363661e-02,
			9.77429082e-01, 5.56648934e-01, 1.65720949e-01,
			3.73923998e-01, 6.85446559e-01, 4.48229924e-01,
			8.06041673e-01, 7.30815522e-01, 4.81948392e-01,
			7.77769183e-01, 7.83588589e-01, 9.38558072e-01,
			6.64625832e-01, 1.35741760e-02, 9.25287790e-01,
			3.88957140e-01, 6.78236457e-01, 7.26967458e-02,
			7.05839229e-01, 9.95219502e-01, 3.91167135e-01,
			1.44943174e-02, 3.72116994e-02, 7.06549735e-01,
			2.75404092e-01, 1.81975964e-01, 2.26397668e-01,
			6.13223744e-01, 4.75446905e-01, 9.63517736e-02,
			3.67172429e-01, 7.31629486e-01, 6.53105651e-01,
			7.19277384e-01, 8.30584132e-01, 8.75142403e-01,
			4.02537412e-01, 5.52235871e-01, 5.65392973e-01,
			7.92152691e-02, 1.21970309e-01, 2.59738513e-01,
			2.55494363e-01, 2.76248689e-01, 3.67794150e-02,
			8.38233056e-01, 2.12615131e-01, 6.38317085e-01,
			5.02832411e-01, 9.43088709e-01, 6.05868188e-03,
			5.51765183e-01, 3.53091600e-01, 5.32824026e-01,
			5.38307880e-01, 3.15461915e-01, 2.08980764e-01,
			2.93621181e-02, 8.44814775e-01, 1.47270090e-01,
			6.24393551e-01, 7.50161735e-01, 9.77280821e-01,
			9.11483440e-01, 8.66525185e-01, 4.90986219e-01,
			9.31341961e-01, 2.26645552e-01, 8.36441449e-01,
			2.32829761e-01, 8.58491212e-01, 5.64878768e-01,
			8.39222502e-01, 7.20382196e-01, 8.99417013e-01,
			2.07252797e-02, 9.17169285e-01, 5.45971034e-01,
			8.93160880e-01, 5.04326679e-01, 4.20001232e-01,
			6.25497395e-01, 8.85520642e-01, 5.02976045e-01,
			6.44584378e-01, 3.26280361e-01, 7.05232314e-01,
			3.37440085e-01, 6.89787489e-01, 4.80478932e-01,
			8.40836804e-01, 7.41527016e-01, 1.50309239e-01,
			4.36557677e-01, 7.63701402e-01, 6.16998706e-02,
			3.18456435e-01, 5.85954087e-01, 1.21343867e-01,
			7.20521003e-01, 2.45186208e-01, 3.85252027e-01,
			8.48789813e-01, 1.43912886e-01, 7.86534325e-02,
			4.48493943e-01, 4.33108929e-01, 7.18728091e-01,
			5.50250440e-01, 7.36505398e-01, 2.67240379e-01,
			7.46186721e-02, 5.26203216e-01, 6.24895708e-01,
			3.34811056e-01, 6.53914133e-01, 1.15371526e-01,
			4.13274629e-01, 2.19744644e-01, 3.03559195e-01,
			5.85046026e-01, 3.78047755e-01, 6.59807340e-01,
			2.54449234e-01, 7.04257598e-01, 1.01238095e-01,
			2.22505994e-01, 3.39178964e-02, 7.48430431e-01,
			2.18881873e-02, 3.32312822e-01, 2.12617336e-01,
			3.98868813e-01, 2.65151060e-01, 8.39484266e-01,
			6.15181433e-01, 3.97863561e-01, 2.75984073e-01,
			9.99600706e-01, 1.88869666e-01, 7.69787640e-02,
			3.07624379e-01, 4.06286026e-01, 3.41273776e-01,
			5.51636634e-01, 4.12947975e-01, 6.76054967e-01,
			2.48767420e-01, 7.25341301e-01, 9.93357965e-01,
			3.79848988e-01, 5.06446464e-01, 5.21825883e-01,
			3.22729153e-01, 4.26705456e-01, 6.52582934e-01,
			3.99645361e-01, 4.75831265e-01, 2.85672794e-01,
			6.52847457e-04, 2.76571758e-01, 5.69479915e-01,
			7.83894350e-01, 3.37519403e-01, 4.58578902e-01,
			3.17037515e-01, 2.77162741e-02, 1.95382654e-01,
			7.12168814e-01, 5.44876585e-01, 1.23726114e-01,
			9.18583788e-01, 1.44383292e-01, 9.38492160e-01,
			7.55994808e-01, 6.00182850e-01, 8.10617083e-01,
			9.73216092e-01, 4.39902222e-01, 1.42745089e-01,
			7.47462613e-02, 9.08988647e-01, 6.79204833e-02,
			7.17071952e-01, 7.11768424e-01, 3.99622778e-01,
			3.29847963e-01, 5.81864008e-02, 6.49876763e-01,
			5.95685067e-01, 3.36207151e-01, 3.46393169e-01,
			9.92427846e-01, 1.60780538e-01, 9.18931249e-01,
			1.70405207e-01, 9.11274484e-01, 1.79809430e-01,
			2.50674074e-01, 5.22505271e-01, 7.16855302e-01,
			5.60938957e-01, 9.43335794e-01, 7.25692518e-01,
			7.70806762e-01, 8.98513757e-01, 1.65732234e-01,
			1.72890828e-01, 8.48777304e-01, 2.87086053e-01,
			1.98781786e-01, 5.03656938e-01, 1.47612165e-01,
			3.69058712e-02, 8.51334621e-01, 7.44445339e-01,
			4.27720971e-01, 2.41335929e-01, 8.20189600e-01,
			4.37242660e-01, 4.28779454e-01, 5.66171823e-01,
			3.07347494e-01, 4.95287091e-01, 8.54521365e-01,
			7.82672785e-01, 3.88491981e-01, 4.97372958e-01,
			8.73802133e-01, 6.89339063e-01, 9.68328633e-01,
			3.23633495e-01, 1.23241284e-01, 2.26965702e-01,
			2.21154375e-01, 5.16656471e-01, 7.16954574e-02,
			4.09640726e-01, 1.87890373e-01, 2.71456591e-01,
			1.57663580e-01, 8.29317441e-02, 4.73139959e-01,
			5.24923694e-01, 4.16198319e-01, 3.15095588e-01,
			1.35332179e-01, 3.93257180e-01, 2.02901630e-01,
			7.72759847e-01, 9.93927044e-01, 2.49460688e-01,
			5.82376900e-01, 5.25706769e-01, 2.87787421e-01,
			2.16496598e-01, 8.35099814e-01, 5.35957177e-01,
			4.91618641e-01, 1.44465157e-01, 8.88917645e-01,
			1.25770785e-01, 7.85181291e-01, 3.58927307e-01,
			8.39135258e-01, 9.10890366e-01, 3.77602363e-01,
			9.29289563e-01, 7.07514850e-02, 7.35036691e-01,
			9.57135927e-01, 2.19759021e-01, 6.73289456e-01,
			7.30817583e-01, 4.04290616e-01, 9.22295436e-01,
			6.66391471e-01, 8.87257477e-02, 7.44412701e-01,
			9.82360156e-01, 3.98294388e-01, 1.38140085e-01,
			7.64576779e-01, 6.32431939e-01, 1.55314818e-01,
			2.62564325e-01, 1.31608201e-01, 8.99430083e-01,
			7.46034079e-01, 2.89911664e-01, 3.12922152e-01,
			2.46865966e-01, 3.22294320e-01, 3.15371358e-01,
			7.96924119e-02, 5.89788303e-01, 7.94995333e-01,
			8.89543060e-01, 2.20740647e-01, 4.56175740e-01,
			4.18031100e-01, 4.06114959e-01, 8.71992897e-01,
			5.82961549e-01, 7.28253395e-01, 5.22098960e-01,
			1.61763277e-02, 1.26883051e-01, 1.97997726e-02,
			8.00199530e-01, 1.09186103e-01, 1.25396951e-01,
			4.34603278e-01, 8.07023910e-01, 6.55509247e-01,
			7.35394620e-02, 5.89847687e-01, 7.16722767e-01,
			9.05549687e-01, 3.03882755e-01, 1.34238292e-01,
			9.28462545e-01, 1.74817488e-01, 8.82523725e-01,
			3.37100876e-01, 6.32863587e-01, 6.84709310e-01,
			2.06131946e-01, 1.94450364e-01, 5.03304294e-01,
			2.96740431e-01, 9.41682112e-01, 1.77891002e-01,
			2.47051282e-01, 6.71084574e-01, 4.09756621e-02,
			9.73205444e-01, 3.80096657e-01, 4.06318783e-01,
			7.07747343e-01, 6.72589108e-01, 4.63835890e-01,
			8.04687686e-01, 1.96463461e-01, 1.41409553e-01,
			2.51984501e-01, 1.27020027e-01, 3.88359766e-01,
			7.78038893e-01, 2.48669655e-01, 1.91301081e-01,
			2.06047236e-01, 5.14207706e-01, 1.60189497e-01,
			3.34720235e-01, 2.64063513e-02, 3.07463293e-01,
			7.42842886e-01, 9.79285490e-01, 8.36081472e-01,
			1.90741675e-01, 7.31804725e-01, 1.65466257e-01,
			1.27046262e-01, 8.81041309e-01, 4.36284427e-01,
			7.54032680e-01, 3.88426901e-01, 7.61263115e-01,
			6.76340911e-01, 8.73717503e-02, 4.92694671e-01,
			5.57821356e-01, 3.80565323e-01 };
			/*{ 0.42853272, 0.9506798, 0.05663977, 0.11311561, 0.02613072,
			0.63137306, 0.87545471, 0.15548739, 0.71894277, 0.94332415,
			0.28287974, 0.83165223, 0.07905281, 0.82389866, 0.4355072,
			0.52261919, 0.06315616, 0.51244393, 0.31681111, 0.45588895,
			0.94310626, 0.697115, 0.7618385, 0.2254809, 0.2967616,
			0.86576082, 0.97848873, 0.33970036, 0.3483929, 0.93010098,
			0.06182218, 0.90778032 };*/
			Dtype output_data[] = { 2.16025906, 2.29280275, 1.58686864, 1.72108248, 1.97193186,
				2.3069177, 1.89890419, 1.89820372, 1.94869925, 2.09009291,
				1.57698948, 2.21674654, 2.0637653, 2.18707765, 2.31164631,
				1.96017033, 2.03368767, 2.13915107, 1.7555607, 1.86825133,
				2.07691682, 2.23753768, 1.90569532, 1.93235003, 1.86714914,
				1.53922808, 1.60561326, 1.93493331, 1.63161629, 1.55815457,
				1.86175008, 2.31785232, 1.92311807, 2.4014513, 1.48329509,
				1.82049705, 1.86836353, 1.15970563, 2.15274965, 1.67113923,
				2.04796577, 1.86827625, 1.92226297, 1.69199076, 2.53834686,
				1.75389163, 1.834389, 1.55297847, 2.05051934, 1.69687311,
				1.92421824, 1.44689111, 2.01651143, 1.74057415, 2.40429291,
				1.90704393, 1.72921244, 1.94401434, 1.62334916, 1.3119452,
				2.13941723, 1.77987705, 1.98457029, 1.93085357, 1.73544296,
				2.26864171, 1.73975801, 1.84393906, 1.66360728, 1.68721675 };
		/*{ 0.84110116, 1.69443013, 1.01946872, 1.00087348, 1.05018245,
			1.53726957, 1.28141693, 1.09459482 };*/
		caffe_copy(blob_bottom_->count(), input_data, blob_bottom_->mutable_cpu_data());
		//caffe_set(blob_bottom_vec_[0]->count(), (Dtype)1, blob_bottom_vec_[0]->mutable_cpu_data());

		LayerParameter layer_param;
		AmplitudeLayer<Dtype> layer(layer_param);
		layer.SetUp(blob_bottom_vec_, blob_top_vec_);
		EXPECT_EQ(this->blob_top_->num(), this->blob_bottom_->num()) 
			<< "(top_num,bottom_num)=" << this->blob_top_->num() << ","
			<< this->blob_bottom_->num();
		EXPECT_EQ(this->blob_top_->channels(), 1)
			<< "(top_channels,bottom_channels)=" << this->blob_top_->channels() << ","
			<< this->blob_bottom_->channels();
		EXPECT_EQ(this->blob_top_->height(), this->blob_bottom_->height())
			<< "(top_height,bottom_height)=" << this->blob_top_->height() << ","
			<< this->blob_bottom_->height();
		EXPECT_EQ(this->blob_top_->width(), this->blob_bottom_->width())
			<< "(top_width,bottom_width)=" << this->blob_top_->width() << ","
			<< this->blob_bottom_->width();

		layer.Forward(blob_bottom_vec_, blob_top_vec_);
		const Dtype min_precision = 1e-5;
		for (int i = 0; i < blob_top_->count(); i++)
		{
			EXPECT_NEAR(this->blob_top_->cpu_data()[i], output_data[i], min_precision)
				<< "(top_data,gt_data)=" << this->blob_top_->cpu_data()[i] << ","
				<< output_data[i];
		}
	}

	TYPED_TEST(AmplitudeTest, TestBackward)
	{
		typedef typename TypeParam::Dtype Dtype;
		FillerParameter filler_param;
		filler_param.set_std(0.1);
		GaussianFiller<Dtype> filler(filler_param);
		filler.Fill(blob_bottom_);

		LayerParameter layer_param;
		AmplitudeLayer<Dtype> layer(layer_param);
		GradientChecker<Dtype> checker(1e-4, 1e-3, 1701);
		checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
			this->blob_top_vec_);
	}

}